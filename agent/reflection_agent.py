import os
from typing import Tuple
from langchain_community.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# Main prompt template for the reflection agent
PROMPT_TEMPLATE = """
You are a daily reflection and planning assistant. Your goal is to:
1. Reflect on the user's journal and dream input
2. Interpret the user's emotional and mental state
3. Understand their intention and 3 priorities
4. Generate a practical, energy-aligned strategy for their day

INPUT:
Morning Journal: {journal}
Intention: {intention}
Dream: {dream}
Top 3 Priorities: {priorities}

OUTPUT:
1. Inner Reflection Summary
2. Dream Interpretation Summary
3. Energy/Mindset Insight
4. Suggested Day Strategy (time-aligned tasks)
"""

def get_llm():
    """Get the appropriate LLM based on available API keys"""
    # Try OpenRouter first (preferred for the test)
    openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
    if openrouter_api_key:
        return ChatOpenAI(
            model="openai/gpt-3.5-turbo",
            openai_api_base="https://openrouter.ai/api/v1",
            openai_api_key=openrouter_api_key,
            temperature=0.7
        )
    
    # Try Together AI
    together_api_key = os.getenv('TOGETHER_API_KEY')
    if together_api_key:
        return ChatOpenAI(
            model="togethercomputer/llama-2-70b-chat",
            openai_api_base="https://api.together.xyz",
            openai_api_key=together_api_key,
            temperature=0.7
        )
    
    # Fallback to OpenAI
    openai_api_key = os.getenv('OPENAI_API_KEY')
    if openai_api_key:
        return ChatOpenAI(
            model="gpt-3.5-turbo",
            openai_api_key=openai_api_key,
            temperature=0.7
        )
    
    return None

def generate_insights(journal: str, intention: str, dream: str, priorities: str) -> Tuple[str, str]:
    """Generate insights and strategy for the day using LangChain agent"""
    
    try:
        llm = get_llm()
        if llm:
            return call_langchain_agent(journal, intention, dream, priorities, llm)
        else:
            return generate_structured_response(journal, intention, dream, priorities)
    except Exception as e:
        print(f"LangChain agent error: {e}")
        return generate_structured_response(journal, intention, dream, priorities)

def call_langchain_agent(journal: str, intention: str, dream: str, priorities: str, llm) -> Tuple[str, str]:
    """Call LangChain agent to generate response"""
    try:
        # Create the prompt template
        prompt = PromptTemplate(
            input_variables=["journal", "intention", "dream", "priorities"],
            template=PROMPT_TEMPLATE
        )
        
        # Create the LangChain chain
        chain = LLMChain(llm=llm, prompt=prompt)
        
        # Run the chain
        response = chain.run({
            "journal": journal,
            "intention": intention,
            "dream": dream,
            "priorities": priorities
        })
        
        # Parse the response into reflection and strategy
        sections = response.split('\n\n')
        
        if len(sections) >= 2:
            reflection = sections[0] if sections[0] else "Inner reflection generated by AI"
            strategy = sections[1] if sections[1] else "Strategy generated by AI"
        else:
            reflection = response
            strategy = "Strategy will be generated based on your inputs"
            
        return reflection, strategy
        
    except Exception as e:
        print(f"LangChain API error: {e}")
        return generate_structured_response(journal, intention, dream, priorities)

def generate_structured_response(journal: str, intention: str, dream: str, priorities: str) -> Tuple[str, str]:
    """Generate intelligent structured response when AI is not available"""
    
    # Analyze journal content for emotional tone
    journal_lower = journal.lower()
    emotional_keywords = {
        'positive': ['happy', 'excited', 'grateful', 'joy', 'peaceful', 'content', 'motivated', 'energized'],
        'negative': ['sad', 'anxious', 'worried', 'stressed', 'tired', 'frustrated', 'overwhelmed'],
        'neutral': ['focused', 'calm', 'balanced', 'steady', 'determined']
    }
    
    detected_emotion = 'neutral'
    for emotion, keywords in emotional_keywords.items():
        if any(keyword in journal_lower for keyword in keywords):
            detected_emotion = emotion
            break
    
    # Analyze dream content for themes
    dream_lower = dream.lower()
    dream_themes = []
    if any(word in dream_lower for word in ['work', 'job', 'career', 'office']):
        dream_themes.append('career/work')
    if any(word in dream_lower for word in ['family', 'home', 'house', 'parents']):
        dream_themes.append('family/home')
    if any(word in dream_lower for word in ['travel', 'journey', 'adventure']):
        dream_themes.append('adventure/exploration')
    if any(word in dream_lower for word in ['water', 'ocean', 'river']):
        dream_themes.append('emotions/flow')
    if any(word in dream_lower for word in ['flying', 'falling', 'running']):
        dream_themes.append('freedom/control')
    
    # Analyze priorities for complexity
    priority_list = [p.strip() for p in priorities.split(',') if p.strip()]
    complexity_level = 'simple' if len(priority_list) <= 2 else 'complex'
    
    # Generate varied reflection based on analysis
    if detected_emotion == 'positive':
        reflection = f"""
        Inner Reflection Summary:
        Your morning journal shows positive energy and enthusiasm. You're focused on {intention} with clear purpose. Your priorities ({priorities}) reflect a well-structured approach to your day.
        
        Dream Interpretation Summary:
        {f"Your dream touches on themes of {', '.join(dream_themes)}" if dream_themes else "Your dream content offers insights into your subconscious thoughts and desires."} This suggests you're processing important aspects of your life journey.
        
        Energy/Mindset Insight:
        You're in an excellent state of mind - energized and ready to tackle challenges. Your positive energy will help you navigate any obstacles that arise today.
        """
    elif detected_emotion == 'negative':
        reflection = f"""
        Inner Reflection Summary:
        I notice some challenging emotions in your morning reflection. While you're focused on {intention}, there may be underlying concerns or stress. Your priorities ({priorities}) show determination despite these feelings.
        
        Dream Interpretation Summary:
        {f"Your dream reflects themes of {', '.join(dream_themes)}" if dream_themes else "Your dream content may be processing recent experiences or concerns."} This could indicate areas of your life that need attention or resolution.
        
        Energy/Mindset Insight:
        It's okay to acknowledge these feelings. Consider starting with smaller, manageable tasks to build momentum. Remember that every step forward counts, no matter how small.
        """
    else:
        reflection = f"""
        Inner Reflection Summary:
        You're in a balanced, focused state of mind. Your intention to {intention} is clear and grounded. Your priorities ({priorities}) demonstrate a practical, methodical approach to your day.
        
        Dream Interpretation Summary:
        {f"Your dream explores themes of {', '.join(dream_themes)}" if dream_themes else "Your dream content suggests a thoughtful processing of your experiences and goals."} This indicates a healthy integration of your conscious and subconscious mind.
        
        Energy/Mindset Insight:
        You're in a stable, productive mindset. This balanced energy will serve you well in maintaining focus and achieving your goals throughout the day.
        """
    
    # Generate varied strategy based on analysis
    if complexity_level == 'complex':
        strategy = f"""
        Suggested Day Strategy:
        1. **Morning Focus (9-11 AM)**: Start with "{priority_list[0] if priority_list else 'your main priority'}" - tackle the most challenging task when your energy is highest
        2. **Mid-Morning Break (11-12 PM)**: Take a 15-minute reflection break to assess progress and adjust your approach
        3. **Afternoon Session (2-4 PM)**: Work on "{priority_list[1] if len(priority_list) > 1 else 'your second priority'}" with focused attention
        4. **Late Afternoon (4-5 PM)**: Address "{priority_list[2] if len(priority_list) > 2 else 'remaining tasks'}" and plan tomorrow's priorities
        5. **Evening Reflection**: Review your day and celebrate progress, no matter how small
        """
    else:
        strategy = f"""
        Suggested Day Strategy:
        1. **Deep Focus Session**: Dedicate 2-3 hours to "{priority_list[0] if priority_list else 'your main goal'}" without interruptions
        2. **Intention Reminder**: Set hourly reminders to check in with your intention: "{intention}"
        3. **Dream Integration**: Take 10 minutes to reflect on how your dream themes might relate to today's goals
        4. **Flexible Afternoon**: Use remaining time for "{priority_list[1] if len(priority_list) > 1 else 'additional priorities'}" or unexpected opportunities
        5. **Evening Wind-Down**: Reflect on how well you maintained your intention throughout the day
        """
    
    return reflection, strategy
   